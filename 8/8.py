import string
from itertools import *

# (С. Чайкин) Все слова из одиннадцати букв,  составленные из букв
# русского алфавита, записаны в обратном алфавитном порядке и пронумерованы.
# Ниже приведено начало списка.
# 1. ЯЯЯЯЯЯЯЯЯЯЯ
# 2. ЯЯЯЯЯЯЯЯЯЯЮ
# 3. ЯЯЯЯЯЯЯЯЯЯЭ
# 4. ЯЯЯЯЯЯЯЯЯЯЬ
# 5. ЯЯЯЯЯЯЯЯЯЯЫ
# Под каким номером стоит слово ИНФОРМАТИКА?
# Ответ: 36077938542683169

# # сделаем функцию для перевода числа из любой СС в 10-ричную
# def cc(n, b): return sum(v*b**k for k, v in enumerate(n[::-1]))
# abc = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'[::-1]
# w = 'ИНФОРМАТИКА'
# # преобразуем буквы в число (Я = 0, Ю = 1, ...)
# c = [abc.index(x) for x in w]
# # переводим число из 33-ричной сс в 10-ричную
# r = cc(c, 33)
# print(r + 1)

# -------------------------------------------------------------------------

# (М. Ишимов) Все 6-буквенные слова, составленные из букв Г, О, Н, Д, У, Б, Ш,
# записаны в алфавитном порядке и пронумерованы.
# Вот начало списка:
# 1. ББББББ
# 2. БББББГ
# 3. БББББД
# 4. БББББН
# 5. БББББО
# 6. БББББУ
# ...
# Под каким номером в списке стоит последнее слово с нечётным номером,
# которое не начинается с буквы Б, содержит не менее двух букв Н и не содержит букв У?
# Ответ: 117625

# from itertools import *
# 
# cnt = 1
# for i in product("БГДНОУШ", repeat=6):
#     if cnt % 2 == 1 and i[0] != 'Б' and i.count('Н') >= 2 and i.count('У') == 0:
#         print(cnt, i)
#     cnt +=1

# --------------------------------------------------

# Уровень: ГРОБ (по мнению КЕГЭ)
# (С. Якунин) Полина составляет 21-буквенные слова из букв слова РЕКОГНОСЦИРОВКА.
# Каждая гласная в них используется столько раз, сколько в слове РЕКОГНОСЦИРОВКА.
# Каждая согласная может использоваться сколько угодно раз или не использоваться совсем.
# Сколько слов может составить Полина, если известно, что сумма порядковых номеров гласных букв,
# в каждом из них, равна 21? Буквы нумеруются слева направо, начиная с единицы.

# Ответ: 569707381193160
#
# Подсчёт конфигураций:
# 21 нам даёт единственный набор, состоящий из 6 неповторяющихся
# гласных: 1 + 2 + 3 + 4 + 5 + 6. Гласные, которые могут стоять на этих местах:
# 3 буквы О, одна буква А, одна буква И и одна буква Е. Всего: 6!/3! = 4 * 5 * 6 = 120 конфигураций.
#
# Размещение согласных:
# Любая согласная может занимать одну из следующих 15 позиций.
# Имеем 15 перемноженных семёрок (размещения с повторениями) или 715 = 4747561509943.
#
# Итоговый подсчёт слов:
# Итак, в каждой из 120 конфигураций есть 4747561509943 вариантов.
# Значит, всего: 120 * 4747561509943 = 569707381193160 слов.

# from itertools import *
#                                                       не посчитается, слишком много
# def sum_num (a, value):
#     cnt = 0
#     for i in range(0, len(a)):
#         if a[i] == value:
#            cnt += (i + 1)
#     return cnt
#
# cnt = 0
# for i in product('РЕКОГНСЦИВА', repeat=21):
#     e_index = sum_num(i, "Е")
#     o_index = sum_num(i, "О")
#     i_index = sum_num(i, "И")
#     a_index = sum_num(i, "А")
#
#     sum = e_index + o_index + i_index + a_index
#     if i.count('Е') == 1 and i.count('О') == 3 and i.count('И') == 1 and i.count("А") == 1 and sum == 21:
#         cnt += 1
# print(cnt)

# ----------------------------------------------------------------------

# Полина составляет слова, переставляя буквы в слове ПАЙТОН.
# Сколько слов может составить Полина, если известно, что сумма порядковых номеров гласных букв,
# в каждом из них, равна 6? Буквы нумеруются слева направо, начиная с единицы.
# Ответ: 96

# from itertools import *
#
# k = 0
# for i in set(permutations('ПАЙТОН', r=6)):
#     s = ''.join(i)
#     sumpos = 0
#     for j in range(len(s)):
#         if s[j] == 'А' or s[j] == 'О':
#             sumpos += (j + 1)  # порядковый номер на единицу больше индекса
#     if sumpos == 6:
#         k += 1
# print(k)

# -------------------------------------------------------------------

# Вася составляет пятибуквенные слова из букв слова УДАЧ.
# Каждая буква может не входить или входить в слово многократно.
# Первая буква может быть только гласной.
# Все различные слова пронумеровали в алфавитном порядке начиная с 1.
# Под каким номером стоит слово УДАЧА?

# from itertools import *
#
# cnt = 1
# for i in product('АДУЧ', repeat=5):
#     if i[0] == 'У' or i[0] == 'А':
#         if ''.join(i) == 'УДАЧА':
#             print(cnt, i)
#         cnt+=1

# ---------------------------------------------------------
# Сколько существует 5-разрядных пятнадцатеричных чисел,
# в которых кратные 2 и кратные 3 разряды чередуются?
# Например, число 40068 подходит под описание, число 40086 - нет.
#
# Примечание: кратными считаются значения, для которых при делении получается остаток 0.
# Ответ: 17438


# from itertools import *
#
# c2 = ('0', '2', '4', '6', '8', 'a', 'c', 'e')
# c3 = ('0', '3', '6', '9', 'c')
#
# cnt = 0
# for i in product('0123456789abcde', repeat=5):
#     if i[0] != '0' and (((i[0] in c2) and (i[1] in c3) and (i[2] in c2) and (i[3] in c3) and (i[4] in c2)) or ((i[0] in c3) and (i[1] in c2) and (i[2] in c3) and (i[3] in c2) and (i[4] in c3))):
#         cnt += 1
# print(cnt)

# Семён составляет слова путем перестановки букв в слове ХОЧУНАБЮДЖЕТ.
# Сколько слов может составить Семён, если известно,
# что слова с пятью подряд идущими гласными буквами запрещены?

# from itertools import *
#
# cnt = 0
# for i in set(permutations('ХОЧУНАБЮДЖЕТ', r=12)):
#     is_good = True
#     for j in permutations('ОУАЮЕ', r=5):
#         if is_good and i.count(j) != 0:
#             is_good = False
#     if is_good:
#         cnt+=1
# print(cnt)

# -----------------------------------------------------------------------------

# Все шестибуквенные слова, составленные из букв слова КРАТЕР,
# записаны в алфавитном порядке и пронумерованы начиная с 1.
# Буквы могут входить в слово много раз или не входить вовсе.
# Сколько слов будет расположено между словами КАРЕТА и РАКЕТА?

# from itertools import *
#
# cnt = 1
# for i in product('АЕКРТ', repeat = 6):
#     if ''.join(i) == 'КАРЕТА':
#         print(cnt, i)
#     if ''.join(i) == 'РАКЕТА':
#         print(cnt, i)
#     cnt+=1

# Выходит: 6671 ('К', 'А', 'Р', 'Е', 'Т', 'А')
# 9671 ('Р', 'А', 'К', 'Е', 'Т', 'А')
# т.к. между 0 и 1 - 0 чисел, а между 0 и 2 - 1 число, значит a = m - n - 1
# a = 9671 - 6671 - 1 = 2999

# --------------------------------------------------------------------------

# Все пятибуквенные слова, в составе которых могут быть только русские буквы А, К, Л, М, Н, Я,
# записаны в алфавитном порядке и пронумерованы, начиная с 1.
# Ниже приведено начало списка.
# 1. ААААА
# 2. ААААК
# 3. ААААЛ
# 4. ААААМ
# 5. ААААН
# 6. ААААЯ
# 7. АААКА
# Сколько слов находится между первым и последним словами, начинающимися на МН?

# from itertools import *
#
# cnt = 1
# for i in product('АКЛМНЯ', repeat=5):
#     if i[0] == "М" and i[1] == 'Н':
#         print(cnt, i)
#     cnt +=1
# 4968- 4753 - 1 = 214

# -------------------------------------------------------

# (Грачев Н.) Марсианин Саша составляет странные 18буквенные слова из букв Е,В,Л,А,М,П,И,Й.
# Сколько существует различных странных слов,
# в которых в начале слова находится сочетание букв ПИЛАЕВЛА?
# Слово считается странным, если кол-во гласных и согласных букв в слове одинаково.
# Ответ: 191362500

# def f(l, cg, csg):
#     if l == 18: return cg == csg
#     return f(l+1, cg+1, csg)*3+f(l+1, cg, csg+1)*5
# print(f(8,4,4))

# ------------------------------------------------------------------------------

# Из символов Е, Г, Э, 2, 0, 3 составляют 7-буквенные слова,
# записанные в алфавитном порядке (Буквы вначале, цифры после).
# Вот начало этого списка:
# 1.    ГГГГГГГ
# 2.    ГГГГГГЕ
# 3.    ГГГГГГЭ
# 4.    ГГГГГГ0
# 5.    ГГГГГГ2
# 6.    ГГГГГГ3
# 7.     ГГГГГЕГ
# Какое количество слов находятся между словами ЕГЭ2023 и 2023ЕГЭ (исключая эти слова)?

# from itertools import *
#
# cnt = 1
# for i in product('ГЕЭ023', repeat=7):
#     if ''.join(i) == 'ЕГЭ2023':
#         print(cnt, i)
#     if ''.join(i) == '2023ЕГЭ':
#         print(cnt, i)
#     cnt+=1

# 216255 - 50250 - 1 = 166004

# --------------------------------------------------------------------------------

# Марина собирает восьмибуквенные слова из букв своего имени.
# Все буквы могут многократно повторяться.
# На каком месте окажется имя МАРИАННА в отсортированном по алфавиту списке сгенерированных слов?
# Нумерация начинается с 1.

# from itertools import *
#
# cnt = 1
# for i in product('АИМНР', repeat=8):
#     if ''.join(i) == 'МАРИАННА':
#         print(cnt, i)
#     cnt+=1

# -----------------------------------------------------------------------------------

# Генератор паролей составляет пароль длиной 7 символов из набора букв {Q, W, E, R, T, Y, N, O}.
# При генерации пароля отбрасываются пароли, в которых содержится подстрока QWERTY и все пароли,
# в которых один и тот же символ встречается более чем 2 раза.
# Сколько всего различных паролей может составить данный генератор?

# from itertools import *
#
# cnt = 0
# for i in product('QWERTYNO', repeat = 7):
#     i = ''.join(i)
#     if 'QWERTY' not in i :
#         if  i.count('Q') <=2 and i.count('W') <=2 and i.count('E') <=2 and i.count('R') <=2 and i.count('T') <=2 and i.count('Y') <=2 and i.count('N') <=2 and i.count('O') <=2:
#             cnt += 1
# print(cnt)

# ---------------------------------------------------------------------
# Определите количество шестизначных чисел, записанных в восьмеричной системе счисления,
# в записи которых есть ровно две цифры 6,
# при этом никакая нечётная цифра не стоит рядом с цифрой 6.
#
# Пример шестизначного числа, записанного в восьмеричной системе счисления – 1234568.

# from itertools import *
#
# cnt = 0
# for i in product('01234567', repeat=6):
#     i = ''.join(i)
#     if i[0] == '0':
#         continue
#
#     if i.count('6') == 2:
#         i = i.replace('1', 'н').replace('3', 'н').replace('5', 'н').replace('7', 'н')
#         if '6н' not in i and 'н6' not in i:
#            cnt += 1
# print(cnt)

# ---------------------------------------------------------------

# Сколько существует восьмиразрядных чисел,
# записанных в тринадцатеричной системе счисления,
# которые содержат ровно 6 различных цифр и не более 2-х цифр А .

# from functools import *
# #рекурсия считает количество цепочек из цифр
# @lru_cache(None)
# def f(k, ka, digits):
#     #если цепочка длины 8 подходит под условие, то она засчитывается
#     if k==8: return ka<=2 and len(digits)==6
#     #если количество цифр А или цифр в числе превышает условие, цепочки прерываются
#     if ka>2 or len(digits)>6: return 0
#     #в цепочки меньшей длины добавляется ещё одна цифра, количество цепочек с данным началом суммируется
#     return sum( f(k+1, ka+(i=='A'), digits|{i}) for i in '0123456789ABC')
#
# #Ответ - суммарное количество цепочек, не начинающихся с нуля
# print(sum(f(1, i=='A', frozenset(i)) for i in '123456789ABC'))

# ---------------------------------------------------------------
# c = 0
# for word in product('0123456789ABCD', repeat=5):
#     s = ''.join(word)
#     if s[0] != '0' and len(set(s)) == 2 and (s[-1] == '0' or s[-1] == '3'):
#         c += 1
# print(c)
# ---------------------------------------------------------------
# n = 0
# sogl = ['П', 'Р', 'В', 'Ч', 'К']
# for word in product('АВИКРПЧЫ', repeat=5 ):
#     n += 1
#     if n % 5 != 0 and len(set(word)) == 5 and word[0] in sogl and word[1] in sogl and word[2] in sogl and word[3] in sogl and word[4] in sogl:
#         print(n - n//5)
# ---------------------------------------------------------------
# arr1 = []
# arr2 = []
# for word in product('КОНЕЦ', repeat=5):
#     arr1.append(''.join(word))
# c = 0
# for word in product('ДРАКОН', repeat=5):
#     s = ''.join(word)
#     if s in arr1:
#         arr1.remove(s)
#     else: arr2.append(s)
# print(len(arr1) + len(arr2))
# ---------------------------------------------------------------
# c = 0
# for word in product('КАЙФ', repeat=4):
#     s = ''.join(word)
#     if s[-1] != 'Й' and 'КФ' not in s:
#         for let in s:
#             if s.count(let) > 1: break
#         else: c += 1
# print(c)
# ---------------------------------------------------------------
# c = 0
# for word in permutations('КИДАЛА', r=5):
#     s = ''.join(word)
#     for i in range(len(s)-1):
#         l_0 = s[i]
#         l_1 = s[i+1]
#         if l_0 == l_1: break
#     else: c += 1
# print(c)
# ---------------------------------------------------------------
# c = 0
# for word in product('012345678', repeat=9):
#     s = ''.join(word)
#     if s.count('0') == 0:
#         for i in range(len(s)-1):
#             if int(s[i]) % 2 == int(s[i+1]) % 2: break
#             if s.count(s[i]) > 3: break
#             if s.count(s[i+1]) > 3: break
#         else: c += 1
# print(c)
# ---------------------------------------------------------------
# c = 0
# for word in permutations('ПРОСТО', r=6):
#     s = ''.join(word)
#     if 'ОО' not in s: c += 1
# print(c / 2)
# ---------------------------------------------------------------
# c = 0
# for word in product('ЯЩЕР', repeat=5):
#     s = ''.join(word)
#     if s.count('Е') <= 3 and s.count('Е') >= 1: c += 1
# print(c)
# ---------------------------------------------------------------
# n = 0
# for word in product('СПОЛКЙЕДА', repeat=6):
#     if n % 2 == 0 and word[0] == 'К' and word.count('С') == 0 and word.count('Е') == 0 and word.count('Й') >= 2:
#         print(n, word)
#     n += 1
# ----------------------------------------------------------------
# c = 0
# for word in product('0123456789ABCDEF', repeat=3):
#     if word[0] != '0' and int(word[0], 16) > int(word[1], 16) and int(word[1], 16) > int(word[2], 16): c += 1
# for word in product('0123456789ABCDEF', repeat=5):
#     if word[0] != '0' and int(word[0], 16) > int(word[1], 16) and int(word[1], 16) > int(word[2], 16) and int(word[2], 16) > int(word[3], 16) and int(word[3], 16) > int(word[4], 16):
#         c += 1
# print(c)
# ---------------------------------------------------------------
# c = 1
# for word in product(sorted(list('ГИРЛЯНДА')), repeat=6):
#     if c % 2 == 0 and word[0] != 'Я' and word.count('Д') == 3:
#         print(c)
#     c += 1
# ---------------------------------------------------------------
# c = 0
# for word in product('01234567', repeat=7):
#     if word[0] == '0': continue
#     chet = (word.count('0') + word.count('2') + word.count('4') + word.count('6')) == 2
#     is_7 = True
#     for i in range(len(word)-1):
#         l_0 = word[i]
#         l_1 = word[i+1]
#         if l_0 == '7' and l_1 in '1357':
#             is_7 = False
#         if l_1 == '7' and l_0 in '1357':
#             is_7 = False
#     if is_7 and chet: c += 1
# print(c)
# ---------------------------------------------------------------
# n = 0
# for word in product(sorted(list('ГОНДУБШ')), repeat=6):
#     n += 1
#     if n % 2 == 1 and word[0] != 'Б' and word.count('У') == 0 and word.count('Н') >= 2:
#         print(n,word)
# ---------------------------------------------------------------
# c = 0
# for word in product('0123456789ABC', repeat=6):
#     if word[0] == '0': continue
#     if word.count('5') <= 1:
#         for i in range(len(word)-1):
#             l_0 = word[i]
#             l_1 = word[i+1]
#             if l_0 in '13579B' and l_1 in '13579B': break
#         else: c += 1
# print(c)
# ---------------------------------------------------------------
# c = 0
# for word in permutations('АССЕМБЛЕР', r=9):
#     s = ''.join(word)
#     glas = 0
#     for i in range(len(s)):
#         if s[i] in 'АЕ':
#             glas += i + 1
#     if glas == 9: c += 1
# print(c)
# ---------------------------------------------------------------
# c = 0
# for word in permutations('ДЖАВАСКРИПТ', r=11):
#     s = ''.join(word)
#     glas = 0
#     for i in range(len(s)):
#         if s[i] in 'АИ':
#             glas += i + 1
#     if glas == 11: c += 1
# print(c / 2)
# ---------------------------------------------------------------






